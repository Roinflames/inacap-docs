# 1.3. SQLite
"""
SQLite es una biblioteca de software que proporciona un motor de base de datos SQL ligero y aut√≥nomo. 
SQLite3 es un m√≥dulo de Python que te permite interactuar con bases de datos SQLite desde Python. 
Es ideal para proyectos que requieren una base de datos simple y f√°cil de usar sin la necesidad de un servidor de base de datos separado.
"""
"""
üéØ Objetivos:
Leer datos desde CSV con pandas.

Insertarlos en una base SQLite usando sqlite3.

Evitar inyecci√≥n SQL usando par√°metros seguros (?).

Mostrar c√≥mo validar antes de insertar.
"""
import sys
import sqlite3
import pandas as pd

# Validar argumento
if len(sys.argv) < 2:
    print("‚ùå Uso: python 03.py <archivo.csv>")
    exit(1)

archivo_csv = sys.argv[1]

try:
    df = pd.read_csv(archivo_csv, dtype=str)
    columnas_requeridas = {"id", "nombre", "email"}
    if not columnas_requeridas.issubset(df.columns):
        raise ValueError("‚ùå El archivo debe tener columnas: id, nombre, email")

    # Conectar a SQLite (se crea si no existe)
    conn = sqlite3.connect("usuarios.db")
    cursor = conn.cursor()

    # Crear tabla de forma segura
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS usuarios (
        id INTEGER PRIMARY KEY,
        nombre TEXT NOT NULL,
        email TEXT NOT NULL
    )
    """)

    # Limpiar y preparar los datos
    for _, row in df.iterrows():
        try:
            id_val = int(row["id"])
            nombre = row["nombre"].strip()
            email = row["email"].strip().lower()

            # C√≥digo VULNERABLE a inyecci√≥n SQL
            query_vulnerable = f"INSERT OR IGNORE INTO usuarios (id, nombre, email) VALUES ('{id_val}', '{nombre}', '{email}')"
            print(f"\nEjecutando (VULNERABLE): {query_vulnerable}")
            try:
                cursor.execute(query_vulnerable)
                conn.commit()
                print("‚úÖ Inserci√≥n (VULNERABLE) exitosa (¬°esto NO deber√≠a pasar en un sistema seguro!).")
            except sqlite3.Error as e:
                print(f"‚ùå Error al ejecutar (VULNERABLE): {e}")

        except ValueError as ve:
            print(f"‚ö†Ô∏è Error de valor en fila: {row.to_dict()} ‚Üí {ve}")
        except Exception as row_error:
            print(f"‚ö†Ô∏è Otro error en fila: {row.to_dict()} ‚Üí {row_error}")

    conn.commit()
    print("‚úÖ Datos insertados correctamente.")
    print("üëÅÔ∏è‚Äçüó®Ô∏è Usuarios en la base de datos:")
    for fila in cursor.execute("SELECT * FROM usuarios"):
        print(fila)

    conn.close()

except FileNotFoundError:
    print(f"‚ùå El archivo '{archivo_csv}' no fue encontrado.")
except pd.errors.EmptyDataError:
    print("‚ùå El archivo est√° vac√≠o o malformado.")
except sqlite3.Error as db_error:
    print(f"‚ùå Error en la base de datos: {db_error}")
except Exception as e:
    print(f"‚ùå Error inesperado: {e}")